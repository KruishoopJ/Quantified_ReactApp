{"ast":null,"code":"var _jsxFileName = \"/Users/markheij/ipmedth_airsupport/frontend/src/steps/Step_8_Node_Add.js\";\nimport React, { Component } from 'react';\nimport QrReader from 'react-qr-reader';\nimport \"../containers/Home.css\";\nimport { Container, Typography, Box, Grid } from '@material-ui/core';\nimport \"../steps/Step.css\";\nimport firebase from \"../firebase\";\nimport Firebase from \"firebase\";\nexport default class step8 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      result: ''\n    };\n\n    this.handleScan = data => {\n      var user = Firebase.auth().currentUser;\n\n      if (data) {\n        //try to parse JSON (if not JSON then bad QR code)\n        try {\n          var nodedata = JSON.parse(data);\n          console.log(nodedata); //if JSON check for quantified object (if not then bad QR code)\n\n          if (nodedata.hasOwnProperty(\"quantified\") || nodedata.hasOwnProperty(\"Quantified\")) {\n            console.log(\"Quantified\");\n            this.setState({\n              result: \"Node Scanned!\"\n            });\n\n            if (user) {\n              const uid = user.uid;\n              Firebase.firestore().collection(\"nodes\").doc(uid).set(nodedata).then(function () {\n                console.log(\"Written to firestore\"); //move to next step\n              });\n            } else {\n              console.log(\"No user\");\n              this.props.history.push(\"/login\");\n            }\n          } else {\n            this.setState({\n              result: \"Can't find node QR code\"\n            });\n          }\n        } catch (e) {\n          console.log(e);\n          this.setState({\n            result: \"Can't find node QR code\"\n          });\n        }\n      }\n    };\n\n    this.handleError = err => {\n      console.error(err);\n      this.setState({\n        result: \"Something went wrong! Did you use the QR code?\"\n      });\n    };\n  }\n\n  handleAddNode(node) {}\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      justify: \"center\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h3\",\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Nodes\"), React.createElement(Typography, {\n      display: \"block\",\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Scan the QR code to add the node to the system\")), React.createElement(Grid, {\n      style: {\n        width: \"50%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(QrReader, {\n      delay: 300,\n      onError: this.handleError,\n      onScan: this.handleScan,\n      facingMode: \"environment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.result)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/markheij/ipmedth_airsupport/frontend/src/steps/Step_8_Node_Add.js"],"names":["React","Component","QrReader","Container","Typography","Box","Grid","firebase","Firebase","step8","state","result","handleScan","data","user","auth","currentUser","nodedata","JSON","parse","console","log","hasOwnProperty","setState","uid","firestore","collection","doc","set","then","props","history","push","e","handleError","err","error","handleAddNode","node","render","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport QrReader from 'react-qr-reader'\nimport \"../containers/Home.css\";\nimport {\n    Container,\n    Typography,\n    Box,\n    Grid\n} from '@material-ui/core';\nimport \"../steps/Step.css\"\nimport firebase from \"../firebase\";\nimport Firebase from \"firebase\"\n\n\n\n\n\nexport default class step8 extends Component {\n    state = {\n        result: ''\n    };\n\n    handleAddNode(node) {\n\n    }\n\n    handleScan = data => {\n        var user = Firebase.auth().currentUser;\n        if (data) {\n            //try to parse JSON (if not JSON then bad QR code)\n            try {\n                var nodedata = JSON.parse(data);\n                console.log(nodedata);\n                //if JSON check for quantified object (if not then bad QR code)\n                if(nodedata.hasOwnProperty(\"quantified\") || nodedata.hasOwnProperty(\"Quantified\")){\n                    console.log(\"Quantified\");\n                    this.setState({\n                        result: \"Node Scanned!\"\n                    });\n                    if (user) {\n                        const uid = user.uid;\n                        Firebase.firestore().collection(\"nodes\").doc(uid).set(nodedata).then(function () {\n                            console.log(\"Written to firestore\");\n                            //move to next step\n                        });\n                    }else{\n                        console.log(\"No user\");\n                        this.props.history.push(\"/login\")\n                    }\n                }else{\n                    this.setState({\n                        result: \"Can't find node QR code\"\n                    });\n                }\n            }catch (e) {\n                console.log(e);\n                this.setState({\n                    result: \"Can't find node QR code\"\n                });\n            }\n        }\n    };\n    handleError = err => {\n        console.error(err);\n        this.setState({\n            result: \"Something went wrong! Did you use the QR code?\"\n        })\n    };\n\n    render() {\n        return (\n            <Container>\n                <Grid container direction=\"column\" alignItems=\"center\" justify= \"center\" spacing={2}>\n                    <Grid item>\n                        <Typography variant=\"h3\" align=\"center\">Nodes</Typography>\n                        <Typography display=\"block\" variant=\"body1\">\n                            Scan the QR code to add the node to the system\n                        </Typography>\n                    </Grid>\n                    <Grid style={{width: \"50%\"}}>\n\n                        <div>\n                            <QrReader\n                                delay={300}\n                                onError={this.handleError}\n                                onScan={this.handleScan}\n                                facingMode={\"environment\"}\n                            />\n                            <p>{this.state.result}</p>\n                        </div>\n                </Grid>\n              </Grid>\n            </Container>\n\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}