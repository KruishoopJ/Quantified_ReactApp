{"ast":null,"code":"import _slicedToArray from \"/Users/markheij/ipmedth_airsupport/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/markheij/ipmedth_airsupport/frontend/src/auth/forgotpass.js\";\nimport React from \"react\";\nimport TopMenuBar from \"../components/TopMenuBar\";\nimport firebase from \"../firebase/\";\nimport Firebase from \"firebase\";\n\nfunction ForgotPassword(props) {\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        resetPasswordEmail = _React$useState2[0],\n        setResetPasswordEmail = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isPasswordReset = _React$useState4[0],\n        setIsPasswordReset = _React$useState4[1];\n\n  const _React$useState5 = React.useState(null),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        passwordResetError = _React$useState6[0],\n        setPasswordResetError = _React$useState6[1];\n\n  async function handleResetPassword() {\n    try {\n      await firebase.resetPassword(resetPasswordEmail);\n      setIsPasswordReset(true);\n    } catch (err) {\n      console.log(\"Error sending email\", err);\n      setPasswordResetError(err.message);\n      setIsPasswordReset(false);\n    }\n  }\n\n  Firebase.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      console.log(\"User is signed in\");\n      props.history.push(\"/\");\n    } else {\n      console.log(\"User is not signed in\");\n    }\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(TopMenuBar, {\n    block: true,\n    pageName: \"Forgot password\",\n    hamburgerMenu: false,\n    closeButtonOnly: false,\n    closeWithPrompt: false,\n    backButton: true,\n    backRoutePage: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Forgot your password?\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \" We got you! Fill in your e-mail address and we send you an email to reset it.\"), React.createElement(\"input\", {\n    type: \"email\",\n    className: \"input\",\n    placeholder: \"Your email\",\n    onChange: event => setResetPasswordEmail(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"button\",\n    onClick: handleResetPassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Reset Password\")), isPasswordReset && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Check your email to reset your password\"), passwordResetError && React.createElement(\"p\", {\n    className: \"error-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, passwordResetError));\n}\n\nexport default ForgotPassword;","map":{"version":3,"sources":["/Users/markheij/ipmedth_airsupport/frontend/src/auth/forgotpass.js"],"names":["React","TopMenuBar","firebase","Firebase","ForgotPassword","props","useState","resetPasswordEmail","setResetPasswordEmail","isPasswordReset","setIsPasswordReset","passwordResetError","setPasswordResetError","handleResetPassword","resetPassword","err","console","log","message","auth","onAuthStateChanged","user","history","push","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAAA,0BAC0BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAD1B;AAAA;AAAA,QACnBC,kBADmB;AAAA,QACCC,qBADD;;AAAA,2BAEoBR,KAAK,CAACM,QAAN,CAAe,KAAf,CAFpB;AAAA;AAAA,QAEnBG,eAFmB;AAAA,QAEFC,kBAFE;;AAAA,2BAG0BV,KAAK,CAACM,QAAN,CAAe,IAAf,CAH1B;AAAA;AAAA,QAGnBK,kBAHmB;AAAA,QAGCC,qBAHD;;AAK1B,iBAAeC,mBAAf,GAAoC;AACpC,QAAG;AACC,YAAMX,QAAQ,CAACY,aAAT,CAAuBP,kBAAvB,CAAN;AACAG,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,KAHD,CAGE,OAAOK,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,GAAnC;AACAH,MAAAA,qBAAqB,CAACG,GAAG,CAACG,OAAL,CAArB;AACAR,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACA;;AAEDP,EAAAA,QAAQ,CAACgB,IAAT,GAAgBC,kBAAhB,CAAmC,UAASC,IAAT,EAAe;AAC9C,QAAIA,IAAJ,EAAU;AACNL,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAZ,MAAAA,KAAK,CAACiB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH,KAHD,MAGO;AACHP,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEH;AACJ,GARD;AAUA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAkB,IAAA,QAAQ,EAAC,iBAA3B;AAA6C,IAAA,aAAa,EAAE,KAA5D;AAAmE,IAAA,eAAe,EAAE,KAApF;AAA2F,IAAA,eAAe,EAAE,KAA5G;AAAmH,IAAA,UAAU,EAAE,IAA/H;AAAqI,IAAA,aAAa,EAAC,QAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAJJ,EAKI;AACA,IAAA,IAAI,EAAC,OADL;AAEA,IAAA,SAAS,EAAC,OAFV;AAGA,IAAA,WAAW,EAAC,YAHZ;AAIA,IAAA,QAAQ,EAAEO,KAAK,IAAIhB,qBAAqB,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEb,mBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CAXJ,EAgBKJ,eAAe,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAhBxB,EAiBKE,kBAAkB,IAAI;AAAG,IAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BA,kBAA3B,CAjB3B,CADJ;AAsBH;;AAED,eAAeP,cAAf","sourcesContent":["import React from \"react\";\nimport TopMenuBar from \"../components/TopMenuBar\";\nimport firebase from \"../firebase/\";\nimport Firebase from \"firebase\";\n\nfunction ForgotPassword(props){\n    const [resetPasswordEmail, setResetPasswordEmail] = React.useState('')\n    const [isPasswordReset, setIsPasswordReset] = React.useState(false)\n    const [passwordResetError, setPasswordResetError] = React.useState(null)\n\n    async function handleResetPassword(){\n    try{\n        await firebase.resetPassword(resetPasswordEmail)\n        setIsPasswordReset(true)\n    } catch (err) {\n        console.log(\"Error sending email\", err)\n        setPasswordResetError(err.message)\n        setIsPasswordReset(false)\n    }\n    }\n\n    Firebase.auth().onAuthStateChanged(function(user) {\n        if (user) {\n            console.log(\"User is signed in\");\n            props.history.push(\"/\")\n        } else {\n            console.log(\"User is not signed in\");\n\n        }\n    });\n\n    return(\n        <div>\n            <TopMenuBar block pageName=\"Forgot password\" hamburgerMenu={false} closeButtonOnly={false} closeWithPrompt={false} backButton={true} backRoutePage=\"/login\"/>\n\n            <h2>Forgot your password?</h2>\n            <p> We got you! Fill in your e-mail address and we send you an email to reset it.</p>\n            <input\n            type=\"email\"\n            className='input'\n            placeholder=\"Your email\"\n            onChange={event => setResetPasswordEmail(event.target.value)}\n            />\n            <div>\n                <button className=\"button\" onClick={handleResetPassword}>\n                    Reset Password\n                </button>\n            </div>\n            {isPasswordReset && <p>Check your email to reset your password</p>}\n            {passwordResetError && <p className=\"error-text\">{passwordResetError}</p>}\n        </div>\n    )\n\n}\n\nexport default(ForgotPassword)"]},"metadata":{},"sourceType":"module"}