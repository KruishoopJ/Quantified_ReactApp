{"ast":null,"code":"var _jsxFileName = \"/Users/markheij/ipmedth_airsupport/frontend/src/steps/Step_8_Node_Add.js\";\nimport React, { Component } from 'react';\nimport QrReader from 'react-qr-reader';\nimport \"../containers/Home.css\";\nimport { Container, Typography, Box, Grid, SnackbarContent, Snackbar } from '@material-ui/core';\nimport \"../steps/Step.css\";\nimport firebase from \"../firebase\";\nimport Firebase from \"firebase\";\nlet isScanned = false;\nexport default class step8 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      result: ''\n    };\n\n    this.handleScan = data => {\n      var user = Firebase.auth().currentUser;\n\n      if (data) {\n        //try to parse JSON (if not JSON then bad QR code)\n        try {\n          var nodedata = JSON.parse(data);\n          console.log(nodedata); //if JSON check for quantified object (if not then bad QR code)\n\n          if (nodedata.hasOwnProperty(\"quantified\") || nodedata.hasOwnProperty(\"Quantified\")) {\n            console.log(\"Quantified\");\n            const nid = nodedata.quantified.id;\n\n            if (user) {\n              const uid = user.uid;\n              Firebase.firestore().collection(uid).doc(nid).get().then(docSnapshot => {\n                if (docSnapshot.exists) {\n                  this.setState({\n                    result: \"Node was already added. Try another one!\"\n                  });\n                } else {\n                  Firebase.firestore().collection(uid).doc(nid).set(nodedata).then(function () {\n                    console.log(\"Written to firestore\");\n                  });\n                  this.setState({\n                    result: \"Node Scanned!\"\n                  });\n                  isScanned = true; //move to next step\n                }\n              });\n            } else {\n              console.log(\"No user\");\n              this.props.history.push(\"/login\");\n            }\n          } else {\n            this.setState({\n              result: \"Can't find node QR code\"\n            });\n          }\n        } catch (e) {\n          console.error(e);\n          this.setState({\n            result: \"Can't find node QR code\"\n          });\n        }\n      }\n    };\n\n    this.handleError = err => {\n      console.error(err);\n      this.setState({\n        result: \"Something went wrong! Did you use the QR code?\"\n      });\n    };\n  }\n\n  handleAddNode(node) {}\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      justify: \"center\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h3\",\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Nodes\"), React.createElement(Typography, {\n      display: \"block\",\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Scan the QR code to add the node to the system\")), !isScanned && React.createElement(Grid, {\n      style: {\n        width: \"50%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(QrReader, {\n      delay: 300,\n      onError: this.handleError,\n      onScan: this.handleScan,\n      facingMode: \"environment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.result)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/markheij/ipmedth_airsupport/frontend/src/steps/Step_8_Node_Add.js"],"names":["React","Component","QrReader","Container","Typography","Box","Grid","SnackbarContent","Snackbar","firebase","Firebase","isScanned","step8","state","result","handleScan","data","user","auth","currentUser","nodedata","JSON","parse","console","log","hasOwnProperty","nid","quantified","id","uid","firestore","collection","doc","get","then","docSnapshot","exists","setState","set","props","history","push","e","error","handleError","err","handleAddNode","node","render","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAO,wBAAP;AACA,SACIC,SADJ,EAEIC,UAFJ,EAGIC,GAHJ,EAIIC,IAJJ,EAKIC,eALJ,EAMIC,QANJ,QAOO,mBAPP;AAQA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,IAAIC,SAAS,GAAG,KAAhB;AAEA,eAAe,MAAMC,KAAN,SAAoBX,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCY,KADyC,GACjC;AACJC,MAAAA,MAAM,EAAE;AADJ,KADiC;;AAAA,SAUzCC,UAVyC,GAU5BC,IAAI,IAAI;AACjB,UAAIC,IAAI,GAAGP,QAAQ,CAACQ,IAAT,GAAgBC,WAA3B;;AACA,UAAIH,IAAJ,EAAU;AACN;AACA,YAAI;AACA,cAAII,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAf;AACAO,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAFA,CAGA;;AACA,cAAGA,QAAQ,CAACK,cAAT,CAAwB,YAAxB,KAAyCL,QAAQ,CAACK,cAAT,CAAwB,YAAxB,CAA5C,EAAkF;AAC9EF,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,kBAAME,GAAG,GAAGN,QAAQ,CAACO,UAAT,CAAoBC,EAAhC;;AACA,gBAAIX,IAAJ,EAAU;AACN,oBAAMY,GAAG,GAAGZ,IAAI,CAACY,GAAjB;AACAnB,cAAAA,QAAQ,CAACoB,SAAT,GAAqBC,UAArB,CAAgCF,GAAhC,EAAqCG,GAArC,CAAyCN,GAAzC,EAA8CO,GAA9C,GACKC,IADL,CACWC,WAAD,IAAgB;AAClB,oBAAIA,WAAW,CAACC,MAAhB,EAAuB;AACnB,uBAAKC,QAAL,CAAc;AACVvB,oBAAAA,MAAM,EAAE;AADE,mBAAd;AAIH,iBALD,MAKM;AACFJ,kBAAAA,QAAQ,CAACoB,SAAT,GAAqBC,UAArB,CAAgCF,GAAhC,EAAqCG,GAArC,CAAyCN,GAAzC,EAA8CY,GAA9C,CAAkDlB,QAAlD,EAA4Dc,IAA5D,CAAiE,YAAY;AACzEX,oBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,mBAFD;AAGA,uBAAKa,QAAL,CAAc;AACVvB,oBAAAA,MAAM,EAAE;AADE,mBAAd;AAGAH,kBAAAA,SAAS,GAAG,IAAZ,CAPE,CAQF;AAEH;AACJ,eAlBL;AAqBH,aAvBD,MAuBK;AACDY,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,mBAAKe,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,WA/BD,MA+BK;AACD,iBAAKJ,QAAL,CAAc;AACVvB,cAAAA,MAAM,EAAE;AADE,aAAd;AAGH;AACJ,SAxCD,CAwCC,OAAO4B,CAAP,EAAU;AACPnB,UAAAA,OAAO,CAACoB,KAAR,CAAcD,CAAd;AACA,eAAKL,QAAL,CAAc;AACVvB,YAAAA,MAAM,EAAE;AADE,WAAd;AAGH;AACJ;AACJ,KA7DwC;;AAAA,SA8DzC8B,WA9DyC,GA8D3BC,GAAG,IAAI;AACjBtB,MAAAA,OAAO,CAACoB,KAAR,CAAcE,GAAd;AACA,WAAKR,QAAL,CAAc;AACVvB,QAAAA,MAAM,EAAE;AADE,OAAd;AAGH,KAnEwC;AAAA;;AAMzCgC,EAAAA,aAAa,CAACC,IAAD,EAAO,CAEnB;;AA6DDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,QAA1B;AAAmC,MAAA,UAAU,EAAC,QAA9C;AAAuD,MAAA,OAAO,EAAE,QAAhE;AAAyE,MAAA,OAAO,EAAE,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,KAAK,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAA4B,MAAA,OAAO,EAAC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAFJ,CADJ,EAOK,CAACrC,SAAD,IACG,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACsC,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,OAAO,EAAE,KAAKL,WAFlB;AAGI,MAAA,MAAM,EAAE,KAAK7B,UAHjB;AAII,MAAA,UAAU,EAAE,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKF,KAAL,CAAWC,MAAf,CAPJ,CADJ,CARR,CADJ,CADJ;AAyBH;;AA/FwC","sourcesContent":["import React, { Component } from 'react'\nimport QrReader from 'react-qr-reader'\nimport \"../containers/Home.css\";\nimport {\n    Container,\n    Typography,\n    Box,\n    Grid,\n    SnackbarContent,\n    Snackbar\n} from '@material-ui/core';\nimport \"../steps/Step.css\"\nimport firebase from \"../firebase\";\nimport Firebase from \"firebase\"\n\nlet isScanned = false;\n\nexport default class step8 extends Component {\n    state = {\n        result: ''\n    };\n\n\n    handleAddNode(node) {\n\n    }\n\n    handleScan = data => {\n        var user = Firebase.auth().currentUser;\n        if (data) {\n            //try to parse JSON (if not JSON then bad QR code)\n            try {\n                var nodedata = JSON.parse(data);\n                console.log(nodedata);\n                //if JSON check for quantified object (if not then bad QR code)\n                if(nodedata.hasOwnProperty(\"quantified\") || nodedata.hasOwnProperty(\"Quantified\")){\n                    console.log(\"Quantified\");\n\n                    const nid = nodedata.quantified.id;\n                    if (user) {\n                        const uid = user.uid;\n                        Firebase.firestore().collection(uid).doc(nid).get()\n                            .then((docSnapshot) =>{\n                                if (docSnapshot.exists){\n                                    this.setState({\n                                        result: \"Node was already added. Try another one!\"\n                                    });\n\n                                }else {\n                                    Firebase.firestore().collection(uid).doc(nid).set(nodedata).then(function () {\n                                        console.log(\"Written to firestore\");\n                                    });\n                                    this.setState({\n                                        result: \"Node Scanned!\"\n                                    });\n                                    isScanned = true;\n                                    //move to next step\n\n                                }\n                            });\n\n\n                    }else{\n                        console.log(\"No user\");\n                        this.props.history.push(\"/login\")\n                    }\n                }else{\n                    this.setState({\n                        result: \"Can't find node QR code\"\n                    });\n                }\n            }catch (e) {\n                console.error(e);\n                this.setState({\n                    result: \"Can't find node QR code\"\n                });\n            }\n        }\n    };\n    handleError = err => {\n        console.error(err);\n        this.setState({\n            result: \"Something went wrong! Did you use the QR code?\"\n        })\n    };\n\n    render() {\n        return (\n            <Container>\n                <Grid container direction=\"column\" alignItems=\"center\" justify= \"center\" spacing={2}>\n                    <Grid item>\n                        <Typography variant=\"h3\" align=\"center\">Nodes</Typography>\n                        <Typography display=\"block\" variant=\"body1\">\n                            Scan the QR code to add the node to the system\n                        </Typography>\n                    </Grid>\n                    {!isScanned && (\n                        <Grid style={{width: \"50%\"}}>\n                            <div>\n                                <QrReader\n                                    delay={300}\n                                    onError={this.handleError}\n                                    onScan={this.handleScan}\n                                    facingMode={\"environment\"}\n                                />\n                                <p>{this.state.result}</p>\n                            </div>\n                        </Grid>)}\n                </Grid>\n            </Container>\n\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}